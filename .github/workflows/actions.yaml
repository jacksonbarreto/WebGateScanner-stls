# Pipeline for building and pushing a Docker image to DockerHub
# .github/workflows/
name: Docker Image CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Run Go tests
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "./go.mod"
          cache: false

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run tests
        run: |
          go mod download
          go test -v ./...

  versioning:
    name: Versioning
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.version.outputs.new_tag}}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate new version
        id: version
        run: |
          lastTag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')
          echo "lastTag original= $lastTag"
          lastTag=$(echo "$lastTag" | sed 's/^v//g' || echo '0.0.0')
          echo "lastTag processed= $lastTag"
          if [[ "$lastTag" == "" ]]; then
            echo "No tags found. Starting from version 0.0.0."
            MAJOR=0
            MINOR=0
            PATCH=0
          else
            IFS='.' read -ra VERSION <<< "$lastTag"
            MAJOR=${VERSION[0]}
            MINOR=${VERSION[1]:-0}
            PATCH=${VERSION[2]:-0}
          fi

          commitMessages=$(git log "v$lastTag..HEAD" --oneline 2>/dev/null || git log --oneline)

          if [[ $commitMessages == *"feat!"* ]]; then
            MAJOR=$((MAJOR+1))
            MINOR=0
            PATCH=0
          elif [[ $commitMessages == *"feat"* ]]; then
            MINOR=$((MINOR+1))
            PATCH=0
          elif [[ $commitMessages == *"fix"* ]]; then
            PATCH=$((PATCH+1))
          else
            PATCH=$((PATCH+1))
          fi

          new_tag="v$MAJOR.$MINOR.$PATCH"
          echo "new_tag= $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
  

  build-and-push-docker-image:
    name: Build and Push Docker Image
    needs: [test, versioning]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Lowercase repo name
        id: repo_name
        run: echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REPO_NAME }}:${{ needs.versioning.outputs.new_tag }},${{ env.REPO_NAME }}:latest
          platforms: linux/amd64,linux/arm64,linux/arm/v7


  push-tag-and-create-release:
    name: Push Tag and Create Release
    needs: [test, versioning, build-and-push-docker-image]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import
        shell: bash

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git config --global user.signingkey ${{ secrets.GPG_KEY_ID }}
          git config --global commit.gpgsign true

      - name: Push tag
        run: |
          git tag -s ${{ needs.versioning.outputs.new_tag }} -m "Release ${{ needs.versioning.outputs.new_tag }}"
          git push origin ${{ needs.versioning.outputs.new_tag }}

      - name: Generate release notes
        id: generate_notes
        run: |
          TAG_COUNT=$(git tag | wc -l)
          if [ "$TAG_COUNT" -eq 0 ]; then
            RELEASE_NOTES="starting"
          elif [ "$TAG_COUNT" -eq 1 ]; then
            echo "## What's New" > release-notes.txt
            git log --pretty=format:"- %s" $(git rev-list --max-parents=0 HEAD)..${{ needs.versioning.outputs.new_tag }} >> release-notes.txt
          else
            LAST_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=2 | tail -n 1))
            echo "## What's New" > release-notes.txt
            git log --pretty=format:"- %s" $LAST_TAG..${{ needs.versioning.outputs.new_tag }} >> release-notes.txt
          fi

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: ${{ needs.versioning.outputs.new_tag }}
          name: Release ${{ needs.versioning.outputs.new_tag }}
          draft: false
          prerelease: false
          bodyFile: release-notes.txt